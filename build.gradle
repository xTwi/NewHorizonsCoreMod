import java.util.concurrent.TimeUnit
import java.util.Properties
import groovy.util.ConfigSlurper

buildscript {
    repositories {
        mavenCentral()
		jcenter()
		maven {
			name = "gt"
			url = "https://gregtech.overminddl1.com/"
		}
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "jitpack"
            url = "https://jitpack.io"
        }
    }
    dependencies {
        classpath "com.github.GTNH2:ForgeGradle:FG_1.2-SNAPSHOT"
    }
}

plugins {
    id("org.ajoberstar.grgit") version("3.1.1")
}
apply plugin: "java"
apply plugin: "idea"
apply plugin: "forge"
apply plugin: "signing"

idea {
    module {
        inheritOutputDirs = true
        downloadJavadoc = true
        downloadSources = true
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

file "build.properties" withReader {
    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}

version = "${config.coremod.version}"
group = "com.dreammaster"
archivesBaseName = "GTNewHorizonsCoreMod"

minecraft {
    version = "${config.minecraft.version}-${config.forge.version}-${config.minecraft.version}"
    runDir = "eclipse"

    replaceIn "src/main/java/com/dreammaster/lib/Refstrings.java"
    replace "GRADLETOKEN_VERSION", ((String) project.version).split("-")[1]
}

repositories {
    maven {
        name = "UsrvDE"
        url = "http://jenkins.usrv.eu:8081/nexus/content/repositories/releases/"
    }
    maven { // Baubles
    	name = "UsrvDE_3rdParty"
    	url = "http://jenkins.usrv.eu:8081/nexus/content/repositories/thirdparty/"
    }
    maven {
        name = "chickenbones"
        url = "http://chickenbones.net/maven/"
    }
    maven {
        name = "gt"
        url = "https://gregtech.overminddl1.com/"
    }
    maven { // TConstruct
        name = 'DVS1 Maven FS'
        url = 'http://dvs1.progwml6.com/files/maven'
    }
    maven {
        url = "http://www.ryanliptak.com/maven/"
        name = "applecore"
    }
    maven {
        url = "http://maven.cil.li/"
        name = "OpenComputers"
    }
    maven {
        name = "jitpack"
        url = "https://jitpack.io"
    }
    ivy {
        name = "gtnh_download_source"
        artifactPattern("http://downloads.gtnewhorizons.com/Mods_for_Jenkins/[module]-[revision].[ext]")
    }
    ivy {
        name = "gtnh_download_source_stupid_underscore_typo"
        artifactPattern("http://downloads.gtnewhorizons.com/Mods_for_Jenkins/[module]_[revision].[ext]")
    }
}
configurations.all {
    resolutionStrategy.cacheChangingModulesFor(0, TimeUnit.SECONDS)
    setTransitive(false)
}

dependencies {
    compile "eu.usrv:YAMCore:${config.minecraft.version}-${config.yamcore.version}:deobf"
    compile "com.azanor.baubles:Baubles:${config.baubles.version}:deobf"
    compile ("appeng:appliedenergistics2:${config.ae2.version}:api") {
        exclude module: "*"
    }
    compile "applecore:AppleCore:${config.applecore.version}:deobf"
    compile "codechicken:CodeChickenLib:${config.minecraft.version}-${config.codechickenlib.version}:dev"
    compile "codechicken:CodeChickenCore:${config.minecraft.version}-${config.codechickencore.version}:dev"
    compile "codechicken:NotEnoughItems:${config.minecraft.version}-${config.nei.version}:dev"
    compile "net.industrial-craft:industrialcraft-2:${config.ic2.version}:dev"
    compile ("com.enderio:EnderIO:${config.minecraft.version}-${config.enderio.version}:dev") {
        exclude group: "mcp.mobius.waila"
    }
    compile "com.enderio.core:EnderCore:${config.minecraft.version}-${config.endercore.version}:dev"
    compile "thaumcraft:Thaumcraft:1.7.10-4.2.3.5:dev"

    //downloads.gtnewhorizons.com
    compile ":HardcoreEnderExpansion:MC-1.7.10_v1.8.6"
    compile ":Railcraft:1.7.10-9.12.2.0:dev"
    compile ":GT-PlusPlus:1.7.05.53"
    compile ":twilightforest:1.7.10-2.3.8.5-dev-deobf"
    compile ":WitcheryExtras:1.0.1-dev"
    compile ":witchery:1.7.10-0.24.1:deobf"
    //jitpack
    compile("com.github.GTNewHorizons:GT5-Unofficial:no-ic2-maven-SNAPSHOT:dev") {
        setChanging(true)
    }
    compile "com.github.GTNewHorizons:StructureLib:1.0.6:deobf"
    compile("com.github.GTNewHorizons:TinkersConstruct:master-SNAPSHOT:deobf") {
        setChanging(true)
    }
    compile("mantle:Mantle:1.7.10-0.3.2.jenkins207:deobf")
    compile("com.github.GTNewHorizons:Applied-Energistics-2-Unofficial:rv3-1.7.10-SNAPSHOT:dev") {
        setChanging(true)
    }
    compile("com.github.GTNewHorizons:ForestryMC:GTNH-Fixes-SNAPSHOT:dev") {
        setChanging(true)
    }
    compile("com.github.GTNewHorizons:GalacticGregGT5:master-SNAPSHOT") {
        setChanging(true)
    }
    compile("com.github.GTNewHorizons:bartworks:no-ic2-maven-SNAPSHOT:dev") {
        setChanging(true)
    }
    compile fileTree(dir: "libs", include: "*.jar")
}

processResources
{
    def cleanVersion = ((String) project.version).split("-")[1]
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", cleanVersion
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"

        // replace version and mcversion
        expand "version":cleanVersion, "mcversion":project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
}

task devJar(type: Jar) {
    from sourceSets.main.output
    getArchiveClassifier().set("dev")
    manifest {
        attributes "FMLCorePlugin": "com.dreammaster.coremod.DepLoader","FMLCorePluginContainsFMLMod": "true"
    }
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    getArchiveClassifier().set("sources")
}

artifacts {
    archives devJar
    archives sourceJar
}

task signJar(dependsOn: "reobf"){
    doLast {
        ant.signjar(
            destDir: jar.getDestinationDirectory(),
            jar: jar.getArchiveFile(),
            alias: findProperty("keyStoreAlias") ?: "",
            keystore: findProperty("keyStore") ?: "",
            storepass: findProperty("keyStorePass") ?: "",
            digestalg: findProperty("signDigestAlg") ?: "",
            tsaurl: findProperty("signTSAurl") ?: "",
            verbose: true
            )
    }
}

jar {
    manifest {
        attributes "FMLCorePlugin": "com.dreammaster.coremod.DreamCoreMod","FMLCorePluginContainsFMLMod": "true"
    }
}
